{
    "sourceFile": "projects/pico-ctf/reverse-engineering/Flag Hunters/picoCTF Flag Hunters Write Up.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1750844740243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750844747385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+##  CTF Name: Flag Hunters (Easy)\n+\n+### Description:\n+Lyrics jump from verses to the refrain kind of like a subroutine call. There's a hidden refrain this program doesn't print by default. Can you get it to print it? There might be something in it for you.\n+\n+### Hint:\n+1. This program can easily get into undefined states. Don't be shy about Ctrl-C.\n+2.  Unsanitized user input is always good, right?\n+3. Is there any syntax that is ripe for subversion?\n+\n+### Analysis:\n+The script reads `some strings` into `secret_intro`, which is prepended to the song. But `reader(..., '[VERSE1]')` starts at `[VERSE1]`, skipping the flag section. During execution, when the script encounters a `CROWD` line, it replaces that line with user input. This input is split by `;`, so you can inject something like `;RETURN 0`. When processed, `RETURN 0` jumps the pointer `lip` to line 0, and the script then prints the intro containing the flag\n+\n+### Solution:\n+1. **Download the source code:**\n+\t\n+\t![f](./documentation/)\n+\n+2.  **Analyze source code & exploit logic input:**\n+\n+\tThe flag is prepended into the lyrics via `secret_intro`, but the `reader()` function starts reading from `[VERSE1]`, **skipping** the flag section entirely.\n+\n+\t![f]()\n+\t\n+\tWhen the script encounters a `CROWD` line, it asks for user input:\n+\n+\t![f]()\n+\n+\tThe input is then **split by `;`**, and each segment is processed. If one of the segments is `RETURN <n>`, the reader will **jump to line** So, if we input `test;RETURN 0`, the script will:\n+\n+\t-   replace the current line with our input,\n+\t    \n+\t-   process `some strings` (ignored),\n+\t    \n+\t-   and then jump to line `0`, which contains the `secret_intro` and the flag.\n+\n+3.  **Connect via netcat:**\n+\t\n+\t``nc verbal-sleep.picoctf.net 51134``\n+\n+4.  ****Wait for script to reach first `Crowd:` prompt**, then provide:**\n+\n+\t![f]()\n+\t\n+5. ****The script will jump** to line 0, printing the secret intro, including flag:**\n+\n+\t![f]()\n+\n+### Flag:\n+**picoCTF{70637h3r_f0r3v3r_ac197d12}**\n"
                },
                {
                    "date": 1750844795631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-﻿##  CTF Name: Flag Hunters (Easy)\n+##  CTF Name: Flag Hunters (Easy)\n \n ### Description:\n Lyrics jump from verses to the refrain kind of like a subroutine call. There's a hidden refrain this program doesn't print by default. Can you get it to print it? There might be something in it for you.\n \n"
                },
                {
                    "date": 1750844803253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-﻿##  CTF Name: Flag Hunters (Easy)\n+##  CTF Name: Flag Hunters (Easy)\n \n ### Description:\n Lyrics jump from verses to the refrain kind of like a subroutine call. There's a hidden refrain this program doesn't print by default. Can you get it to print it? There might be something in it for you.\n \n"
                }
            ],
            "date": 1750844740243,
            "name": "Commit-0",
            "content": "##  CTF Name: Flag Hunters (Easy)\n\n### Description:\nLyrics jump from verses to the refrain kind of like a subroutine call. There's a hidden refrain this program doesn't print by default. Can you get it to print it? There might be something in it for you.\n\n### Hint:\n1. This program can easily get into undefined states. Don't be shy about Ctrl-C.\n2.  Unsanitized user input is always good, right?\n3. Is there any syntax that is ripe for subversion?\n\n### Analysis:\nThe script reads `some strings` into `secret_intro`, which is prepended to the song. But `reader(..., '[VERSE1]')` starts at `[VERSE1]`, skipping the flag section. During execution, when the script encounters a `CROWD` line, it replaces that line with user input. This input is split by `;`, so you can inject something like `;RETURN 0`. When processed, `RETURN 0` jumps the pointer `lip` to line 0, and the script then prints the intro containing the flag\n\n### Solution:\n1. **Download the source code:**\n\t\n\t![f](./documentation/)\n\n2.  **Analyze source code & exploit logic input:**\n\n\tThe flag is prepended into the lyrics via `secret_intro`, but the `reader()` function starts reading from `[VERSE1]`, **skipping** the flag section entirely.\n\n\t![f]()\n\t\n\tWhen the script encounters a `CROWD` line, it asks for user input:\n\n\t![f]()\n\n\tThe input is then **split by `;`**, and each segment is processed. If one of the segments is `RETURN <n>`, the reader will **jump to line** So, if we input `test;RETURN 0`, the script will:\n\n\t-   replace the current line with our input,\n\t    \n\t-   process `some strings` (ignored),\n\t    \n\t-   and then jump to line `0`, which contains the `secret_intro` and the flag.\n\n3.  **Connect via netcat:**\n\t\n\t``nc verbal-sleep.picoctf.net 51134``\n\n4.  ****Wait for script to reach first `Crowd:` prompt**, then provide:**\n\n\t![f]()\n\t\n5. ****The script will jump** to line 0, printing the secret intro, including flag:**\n\n\t![f]()\n\n### Flag:\n**picoCTF{70637h3r_f0r3v3r_ac197d12}**\n"
        }
    ]
}